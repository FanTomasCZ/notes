# ==========================================================================
# Command examples

/ip dhcp-server lease print where dynamic=yes

# ==========================================================================
# Default firewall rules

:global lanIfName
:global lanNetwork

:set lanIfName "lan-bridge"
:set lanNetwork "192.168.156.32/27"

/ip firewall filter
add action=drop chain=input comment="Input - drop invalid packets" \
    connection-state=invalid
add chain=input comment="Input - allow established and related connections" \
    connection-state=established,related
add chain=input comment="Input - allow LAN access to the router" \
    connection-state=new in-interface=$lanIfName src-address=$lanNetwork
add action=drop chain=input comment="Input - drop everything else"
add action=drop chain=forward comment="Forward - drop invalid packets" \
    connection-state=invalid
add chain=forward comment=\
    "Forward - allow established and related connections" connection-state=\
    established,related
add chain=forward comment=\
    "Forward - allow LAN access to the router and Internet" connection-state=\
    new in-interface=$lanIfName src-address=$lanNetwork
add action=drop chain=forward comment="Forward - drop everything else"

/ip firewall nat
add action=masquerade chain=srcnat comment="NAT LAN connections to the Internet" src-address=\
    $lanNetwork



# ==========================================================================
#DHCP server

/ip pool
add name=dhcp-pool ranges=192.168.10.100-192.168.10.254
/ip dhcp-server
add address-pool=dhcp-pool disabled=no interface=lan-bridge lease-time=3d \
    name=dhcp-lan
/ip dhcp-server network
add address=192.168.10.0/24 dns-server=192.168.10.1 gateway=192.168.10.1 \
    netmask=24


# ==========================================================================
# Port knocking (150, 400, 50)

:global wanIfName

:set wanIfName wan

/ip firewall filter
add action=add-src-to-address-list address-list=PORTKNOCK_STAGE_1 \
    address-list-timeout=20s chain=input comment=\
    "Input - port knocking stage 1" dst-port=150 in-interface=$wanIfName \
    protocol=tcp
add action=add-src-to-address-list address-list=PORTKNOCK_STAGE_2 \
    address-list-timeout=20s chain=input comment=\
    "Input - port knocking stage 2" dst-port=400 in-interface=$wanIfName \
    protocol=tcp src-address-list=PORTKNOCK_STAGE_1
add action=add-src-to-address-list address-list=external-white-list \
    address-list-timeout=12h chain=input comment=\
    "Input - port knocking stage 3" dst-port=50 in-interface=$wanIfName log=\
    yes log-prefix="whitelisting IP (external-white-list)" protocol=tcp \
    src-address-list=PORTKNOCK_STAGE_2


# ==========================================================================
# Allow Winbox access from the whitelist

:global wanIfName

:set wanIfName wan


/ip firewall filter
add chain=input comment="Input - allow Winbox access from the whitelist" \
    dst-port=8291 in-interface=$wanIfName protocol=tcp src-address-list=\
    external-white-list


# ==========================================================================
# Scheduled backup

/system script
add name=BackupCurrentConfig policy=\
    ftp,reboot,read,write,policy,test,password,sniff,sensitive source=":log info \"Backing up\
    \_current config\"\r\
    \n/system backup save name=\"current.config\"\r\
    \n/export compact file=\"current.config\""

/system scheduler
add interval=1d name=ScheduledBackup on-event=BackupCurrentConfig policy=\
    ftp,reboot,read,write,policy,test,password,sniff,sensitive start-date=\
    jan/01/1970 start-time=01:00:00


# ==========================================================================
# Set up external access from more than one wan interface

/ip firewall mangle
add action=mark-connection chain=input comment=\
    "Mark input connections from WAN1" in-interface=wan1 new-connection-mark=\
    wan1-input
add action=mark-connection chain=input comment=\
    "Mark input connections from WAN2" in-interface=wan2 new-connection-mark=\
    wan2-input
add action=mark-routing chain=output comment="Force outuput connections origin\
    ated from WAN1 to be routed through WAN1" connection-mark=wan1-input \
    new-routing-mark=wan1 passthrough=no
add action=mark-routing chain=output comment="Force outuput connections origin\
    ated from WAN2 to be routed through WAN2" connection-mark=wan2-input \
    new-routing-mark=wan2 passthrough=no
add action=mark-connection chain=forward comment=\
    "Mark connections forwarded from WAN1" connection-state=new in-interface=\
    wan1 new-connection-mark=wan1-pfw passthrough=no
add action=mark-connection chain=forward comment=\
    "Mark connections forwarded from WAN2" connection-state=new in-interface=\
    wan2 new-connection-mark=wan2-pfw passthrough=no
add action=mark-routing chain=prerouting comment=\
    "Force connections originated from WAN1 to be routed through WAN1" \
    connection-mark=wan1-pfw in-interface=lan-bridge new-routing-mark=wan1 \
    passthrough=no
add action=mark-routing chain=prerouting comment=\
    "Force connections originated from WAN2 to be routed through WAN2" \
    connection-mark=wan2-pfw in-interface=lan-bridge new-routing-mark=wan2 \
    passthrough=no

/ip route
add comment=wan2 distance=30 gateway=wan2 routing-mark=wan2
add comment=wan1 distance=30 gateway=wan1 routing-mark=wan1
add comment=wan1 distance=10 gateway=wan1
add comment=wan2 distance=20 gateway=wan2
/ip route rule
add action=lookup-only-in-table routing-mark=wan2 table=wan2
add action=lookup-only-in-table routing-mark=wan1 table=wan1

# ==========================================================================
# E-mail server name resolving script (ResolveEmailServer)

:local resolvedMailServerIP [:resolve "mail.rs-kgr.local"]
:if ([/tool e-mail get address] != $resolvedMailServerIP) do={
  :log info ("Setting e-mail server address to " . $resolvedMailServerIP)
  /tool e-mail set address $resolvedMailServerIP
}

# ==========================================================================
# E-mail notification on new DHCP address assignment (script)
# (/ip dhcp-server ('Lease Script' property)
# [!] Make sure ResolveEmailServer script is present

:if ($leaseBound = 1) do={
  :if ([/ip dhcp-server lease get [find active-mac-address=$leaseActMAC] dynamic]) do={
    :local msgSubject ("New DHCP lease on " . [/system identity get name])
    :local msgBody ("DCHP server " . $leaseServerName . " assigned " . $leaseActIP . " to " . \
      [/ip dhcp-server lease get [find active-mac-address=$leaseActMAC] host-name] . \
      " (" . $leaseActMAC . ")")
    :log info ($msgBody)
    /system script run ResolveEmailServer
    /tool e-mail send to="notifications@rs-kgr.local" subject=$msgSubject body=$msgBody
  }
}
